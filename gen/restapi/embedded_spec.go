// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "swagger": "2.0",
  "info": {
    "title": "Payments API",
    "version": "0.1"
  },
  "basePath": "/v1",
  "paths": {
    "/health": {
      "get": {
        "tags": [
          "health"
        ],
        "summary": "Health",
        "operationId": "getHealth",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/health"
            }
          },
          "400": {
            "$ref": "#/responses/invalid-request"
          }
        }
      }
    },
    "/payments": {
      "get": {
        "tags": [
          "payment"
        ],
        "summary": "List Payments",
        "operationId": "listPayments",
        "parameters": [
          {
            "$ref": "#/parameters/pageSize"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/orderBy"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/payment-list"
            }
          },
          "400": {
            "$ref": "#/responses/invalid-request"
          }
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "tags": [
          "payment"
        ],
        "summary": "Add a new Payment",
        "operationId": "createPayment",
        "parameters": [
          {
            "description": "The payment to create",
            "name": "payment",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/create-payment"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/payment"
            }
          },
          "400": {
            "$ref": "#/responses/invalid-request"
          },
          "409": {
            "$ref": "#/responses/conflict"
          }
        }
      }
    },
    "/payments/{paymentID}": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "tags": [
          "payment"
        ],
        "summary": "Get Payment",
        "operationId": "getPayment",
        "parameters": [
          {
            "type": "string",
            "name": "paymentID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/payment"
            }
          },
          "400": {
            "$ref": "#/responses/invalid-request"
          },
          "404": {
            "$ref": "#/responses/not-found"
          }
        }
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "tags": [
          "payment"
        ],
        "summary": "Update Payment",
        "operationId": "updatePayment",
        "parameters": [
          {
            "type": "string",
            "name": "paymentID",
            "in": "path",
            "required": true
          },
          {
            "description": "fields to update for a particular Payment",
            "name": "Update Payment",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/update-payment"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Resource updated successfully",
            "schema": {
              "$ref": "#/definitions/payment"
            }
          },
          "400": {
            "$ref": "#/responses/invalid-request"
          },
          "404": {
            "$ref": "#/responses/not-found"
          }
        }
      },
      "delete": {
        "consumes": [
          "application/json"
        ],
        "tags": [
          "payment"
        ],
        "summary": "Delete Payment",
        "operationId": "deletePayment",
        "parameters": [
          {
            "type": "string",
            "name": "paymentID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Resource deleted successfully"
          },
          "400": {
            "$ref": "#/responses/invalid-request"
          },
          "404": {
            "$ref": "#/responses/not-found"
          }
        }
      }
    }
  },
  "definitions": {
    "create-customer-account": {
      "description": "properties for customer account",
      "type": "object",
      "title": "Customer Account",
      "properties": {
        "account_name": {
          "type": "string"
        },
        "account_number": {
          "type": "string"
        },
        "account_number_code": {
          "type": "string"
        },
        "account_type": {
          "type": "string"
        },
        "address": {
          "type": "string"
        },
        "bank_id": {
          "type": "integer"
        },
        "bank_id_code": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "create-payment": {
      "description": "properties to create a payment",
      "type": "object",
      "title": "createPayment",
      "required": [
        "amount",
        "currency",
        "beneficiary",
        "debtor"
      ],
      "properties": {
        "amount": {
          "type": "number"
        },
        "beneficiary": {
          "$ref": "#/definitions/create-customer-account"
        },
        "currency": {
          "type": "string"
        },
        "debtor": {
          "$ref": "#/definitions/create-customer-account"
        },
        "end_to_end_reference": {
          "type": "string",
          "default": "NOTPROVIDED"
        },
        "payment_purpose": {
          "type": "string"
        },
        "reference": {
          "type": "string"
        }
      }
    },
    "customer-account": {
      "description": "properties for customer account",
      "type": "object",
      "title": "Customer Account",
      "required": [
        "account_name",
        "account_number",
        "account_number_code",
        "bank_id",
        "bank_id_code"
      ],
      "properties": {
        "account_name": {
          "type": "string"
        },
        "account_number": {
          "type": "string"
        },
        "account_number_code": {
          "type": "string"
        },
        "account_type": {
          "type": "string"
        },
        "address": {
          "type": "string"
        },
        "bank_id": {
          "type": "integer"
        },
        "bank_id_code": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "error-response": {
      "description": "Standard error format",
      "type": "object",
      "title": "Error Response",
      "properties": {
        "Code": {
          "type": "string"
        },
        "Message": {
          "type": "string"
        }
      }
    },
    "health": {
      "description": "properties for Health",
      "type": "object",
      "title": "Health",
      "properties": {
        "DateTime": {
          "type": "string"
        }
      }
    },
    "list-metadata": {
      "type": "object",
      "title": "List Metadata",
      "properties": {
        "Offset": {
          "type": "integer",
          "format": "int64",
          "x-omitempty": false
        },
        "PageSize": {
          "type": "integer",
          "format": "int64",
          "x-omitempty": false
        },
        "TotalSize": {
          "type": "integer",
          "format": "int64",
          "x-omitempty": false
        }
      }
    },
    "payment": {
      "description": "properties for payment",
      "type": "object",
      "title": "Payment",
      "properties": {
        "attributes": {
          "$ref": "#/definitions/payment-attribute"
        },
        "id": {
          "type": "string"
        },
        "organisation_id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": [
            "Payment",
            "DirectDebit",
            "Payment, DirectDebit'",
            "Mandate"
          ]
        },
        "version": {
          "type": "integer"
        }
      }
    },
    "payment-attribute": {
      "description": "properties for payment attributes",
      "type": "object",
      "title": "Attributes",
      "properties": {
        "amount": {
          "type": "number"
        },
        "beneficiary_party": {
          "$ref": "#/definitions/customer-account"
        },
        "currency": {
          "type": "string"
        },
        "debtor_party": {
          "$ref": "#/definitions/customer-account"
        },
        "end_to_end_reference": {
          "type": "string"
        },
        "numeric_reference": {
          "type": "string"
        },
        "payment_id": {
          "type": "string"
        },
        "payment_purpose": {
          "type": "string"
        },
        "payment_scheme": {
          "type": "string"
        },
        "payment_type": {
          "type": "string"
        },
        "processing_date": {
          "type": "string",
          "format": "date"
        },
        "reference": {
          "type": "string"
        },
        "scheme_payment_sub_type": {
          "type": "string"
        },
        "scheme_payment_type": {
          "type": "string"
        }
      }
    },
    "payment-list": {
      "type": "object",
      "properties": {
        "Data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/payment"
          }
        },
        "Metadata": {
          "$ref": "#/definitions/list-metadata"
        }
      }
    },
    "update-payment": {
      "description": "properties to update a payment",
      "type": "object",
      "title": "updatePayment",
      "properties": {
        "payment_purpose": {
          "type": "string"
        },
        "reference": {
          "type": "string"
        }
      }
    }
  },
  "parameters": {
    "offset": {
      "type": "string",
      "default": "0",
      "name": "offset",
      "in": "query"
    },
    "orderBy": {
      "pattern": "^[A-Za-z0-9_]+$",
      "type": "string",
      "default": "createddate",
      "name": "orderBy",
      "in": "query"
    },
    "pageSize": {
      "type": "string",
      "default": "100",
      "name": "pageSize",
      "in": "query"
    }
  },
  "responses": {
    "conflict": {
      "description": "Duplicate resource",
      "schema": {
        "$ref": "#/definitions/error-response"
      }
    },
    "forbidden": {
      "description": "Insufficient privilege to execute action.",
      "schema": {
        "$ref": "#/definitions/error-response"
      }
    },
    "invalid-request": {
      "description": "Invalid request",
      "schema": {
        "$ref": "#/definitions/error-response"
      }
    },
    "not-found": {
      "description": "Not found.",
      "schema": {
        "$ref": "#/definitions/error-response"
      }
    },
    "unauthorized": {
      "description": "Unauthorized",
      "schema": {
        "$ref": "#/definitions/error-response"
      }
    }
  }
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "swagger": "2.0",
  "info": {
    "title": "Payments API",
    "version": "0.1"
  },
  "basePath": "/v1",
  "paths": {
    "/health": {
      "get": {
        "tags": [
          "health"
        ],
        "summary": "Health",
        "operationId": "getHealth",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/health"
            }
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/payments": {
      "get": {
        "tags": [
          "payment"
        ],
        "summary": "List Payments",
        "operationId": "listPayments",
        "parameters": [
          {
            "type": "string",
            "default": "100",
            "name": "pageSize",
            "in": "query"
          },
          {
            "type": "string",
            "default": "0",
            "name": "offset",
            "in": "query"
          },
          {
            "pattern": "^[A-Za-z0-9_]+$",
            "type": "string",
            "default": "createddate",
            "name": "orderBy",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/payment-list"
            }
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "tags": [
          "payment"
        ],
        "summary": "Add a new Payment",
        "operationId": "createPayment",
        "parameters": [
          {
            "description": "The payment to create",
            "name": "payment",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/create-payment"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/payment"
            }
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "409": {
            "description": "Duplicate resource",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/payments/{paymentID}": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "tags": [
          "payment"
        ],
        "summary": "Get Payment",
        "operationId": "getPayment",
        "parameters": [
          {
            "type": "string",
            "name": "paymentID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/payment"
            }
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "tags": [
          "payment"
        ],
        "summary": "Update Payment",
        "operationId": "updatePayment",
        "parameters": [
          {
            "type": "string",
            "name": "paymentID",
            "in": "path",
            "required": true
          },
          {
            "description": "fields to update for a particular Payment",
            "name": "Update Payment",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/update-payment"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Resource updated successfully",
            "schema": {
              "$ref": "#/definitions/payment"
            }
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      },
      "delete": {
        "consumes": [
          "application/json"
        ],
        "tags": [
          "payment"
        ],
        "summary": "Delete Payment",
        "operationId": "deletePayment",
        "parameters": [
          {
            "type": "string",
            "name": "paymentID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Resource deleted successfully"
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "create-customer-account": {
      "description": "properties for customer account",
      "type": "object",
      "title": "Customer Account",
      "properties": {
        "account_name": {
          "type": "string"
        },
        "account_number": {
          "type": "string"
        },
        "account_number_code": {
          "type": "string"
        },
        "account_type": {
          "type": "string"
        },
        "address": {
          "type": "string"
        },
        "bank_id": {
          "type": "integer"
        },
        "bank_id_code": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "create-payment": {
      "description": "properties to create a payment",
      "type": "object",
      "title": "createPayment",
      "required": [
        "amount",
        "currency",
        "beneficiary",
        "debtor"
      ],
      "properties": {
        "amount": {
          "type": "number"
        },
        "beneficiary": {
          "$ref": "#/definitions/create-customer-account"
        },
        "currency": {
          "type": "string"
        },
        "debtor": {
          "$ref": "#/definitions/create-customer-account"
        },
        "end_to_end_reference": {
          "type": "string",
          "default": "NOTPROVIDED"
        },
        "payment_purpose": {
          "type": "string"
        },
        "reference": {
          "type": "string"
        }
      }
    },
    "customer-account": {
      "description": "properties for customer account",
      "type": "object",
      "title": "Customer Account",
      "required": [
        "account_name",
        "account_number",
        "account_number_code",
        "bank_id",
        "bank_id_code"
      ],
      "properties": {
        "account_name": {
          "type": "string"
        },
        "account_number": {
          "type": "string"
        },
        "account_number_code": {
          "type": "string"
        },
        "account_type": {
          "type": "string"
        },
        "address": {
          "type": "string"
        },
        "bank_id": {
          "type": "integer"
        },
        "bank_id_code": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "error-response": {
      "description": "Standard error format",
      "type": "object",
      "title": "Error Response",
      "properties": {
        "Code": {
          "type": "string"
        },
        "Message": {
          "type": "string"
        }
      }
    },
    "health": {
      "description": "properties for Health",
      "type": "object",
      "title": "Health",
      "properties": {
        "DateTime": {
          "type": "string"
        }
      }
    },
    "list-metadata": {
      "type": "object",
      "title": "List Metadata",
      "properties": {
        "Offset": {
          "type": "integer",
          "format": "int64",
          "x-omitempty": false
        },
        "PageSize": {
          "type": "integer",
          "format": "int64",
          "x-omitempty": false
        },
        "TotalSize": {
          "type": "integer",
          "format": "int64",
          "x-omitempty": false
        }
      }
    },
    "payment": {
      "description": "properties for payment",
      "type": "object",
      "title": "Payment",
      "properties": {
        "attributes": {
          "$ref": "#/definitions/payment-attribute"
        },
        "id": {
          "type": "string"
        },
        "organisation_id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": [
            "Payment",
            "DirectDebit",
            "Payment, DirectDebit'",
            "Mandate"
          ]
        },
        "version": {
          "type": "integer"
        }
      }
    },
    "payment-attribute": {
      "description": "properties for payment attributes",
      "type": "object",
      "title": "Attributes",
      "properties": {
        "amount": {
          "type": "number"
        },
        "beneficiary_party": {
          "$ref": "#/definitions/customer-account"
        },
        "currency": {
          "type": "string"
        },
        "debtor_party": {
          "$ref": "#/definitions/customer-account"
        },
        "end_to_end_reference": {
          "type": "string"
        },
        "numeric_reference": {
          "type": "string"
        },
        "payment_id": {
          "type": "string"
        },
        "payment_purpose": {
          "type": "string"
        },
        "payment_scheme": {
          "type": "string"
        },
        "payment_type": {
          "type": "string"
        },
        "processing_date": {
          "type": "string",
          "format": "date"
        },
        "reference": {
          "type": "string"
        },
        "scheme_payment_sub_type": {
          "type": "string"
        },
        "scheme_payment_type": {
          "type": "string"
        }
      }
    },
    "payment-list": {
      "type": "object",
      "properties": {
        "Data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/payment"
          }
        },
        "Metadata": {
          "$ref": "#/definitions/list-metadata"
        }
      }
    },
    "update-payment": {
      "description": "properties to update a payment",
      "type": "object",
      "title": "updatePayment",
      "properties": {
        "payment_purpose": {
          "type": "string"
        },
        "reference": {
          "type": "string"
        }
      }
    }
  },
  "parameters": {
    "offset": {
      "type": "string",
      "default": "0",
      "name": "offset",
      "in": "query"
    },
    "orderBy": {
      "pattern": "^[A-Za-z0-9_]+$",
      "type": "string",
      "default": "createddate",
      "name": "orderBy",
      "in": "query"
    },
    "pageSize": {
      "type": "string",
      "default": "100",
      "name": "pageSize",
      "in": "query"
    }
  },
  "responses": {
    "conflict": {
      "description": "Duplicate resource",
      "schema": {
        "$ref": "#/definitions/error-response"
      }
    },
    "forbidden": {
      "description": "Insufficient privilege to execute action.",
      "schema": {
        "$ref": "#/definitions/error-response"
      }
    },
    "invalid-request": {
      "description": "Invalid request",
      "schema": {
        "$ref": "#/definitions/error-response"
      }
    },
    "not-found": {
      "description": "Not found.",
      "schema": {
        "$ref": "#/definitions/error-response"
      }
    },
    "unauthorized": {
      "description": "Unauthorized",
      "schema": {
        "$ref": "#/definitions/error-response"
      }
    }
  }
}`))
}
