// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CustomerAccount Customer Account
//
// properties for customer account
// swagger:model customer-account
type CustomerAccount struct {

	// account name
	// Required: true
	AccountName *string `json:"account_name"`

	// account number
	// Required: true
	AccountNumber *string `json:"account_number"`

	// account number code
	// Required: true
	AccountNumberCode *string `json:"account_number_code"`

	// account type
	AccountType string `json:"account_type,omitempty"`

	// address
	Address string `json:"address,omitempty"`

	// bank id
	// Required: true
	BankID *int64 `json:"bank_id"`

	// bank id code
	// Required: true
	BankIDCode *string `json:"bank_id_code"`

	// name
	Name string `json:"name,omitempty"`
}

// Validate validates this customer account
func (m *CustomerAccount) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccountName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAccountNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAccountNumberCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBankID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBankIDCode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CustomerAccount) validateAccountName(formats strfmt.Registry) error {

	if err := validate.Required("account_name", "body", m.AccountName); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAccount) validateAccountNumber(formats strfmt.Registry) error {

	if err := validate.Required("account_number", "body", m.AccountNumber); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAccount) validateAccountNumberCode(formats strfmt.Registry) error {

	if err := validate.Required("account_number_code", "body", m.AccountNumberCode); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAccount) validateBankID(formats strfmt.Registry) error {

	if err := validate.Required("bank_id", "body", m.BankID); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAccount) validateBankIDCode(formats strfmt.Registry) error {

	if err := validate.Required("bank_id_code", "body", m.BankIDCode); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CustomerAccount) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CustomerAccount) UnmarshalBinary(b []byte) error {
	var res CustomerAccount
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
