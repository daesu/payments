// Code generated by go-swagger; DO NOT EDIT.

package payment

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"
)

// NewListPaymentsParams creates a new ListPaymentsParams object
// with the default values initialized.
func NewListPaymentsParams() ListPaymentsParams {

	var (
		// initialize parameters with default values

		offsetDefault   = string("0")
		orderByDefault  = string("createddate")
		pageSizeDefault = string("100")
	)

	return ListPaymentsParams{
		Offset: &offsetDefault,

		OrderBy: &orderByDefault,

		PageSize: &pageSizeDefault,
	}
}

// ListPaymentsParams contains all the bound params for the list payments operation
// typically these are obtained from a http.Request
//
// swagger:parameters listPayments
type ListPaymentsParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*
	  In: query
	  Default: "0"
	*/
	Offset *string
	/*
	  Pattern: ^[A-Za-z0-9_]+$
	  In: query
	  Default: "createddate"
	*/
	OrderBy *string
	/*
	  In: query
	  Default: "100"
	*/
	PageSize *string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewListPaymentsParams() beforehand.
func (o *ListPaymentsParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qOffset, qhkOffset, _ := qs.GetOK("offset")
	if err := o.bindOffset(qOffset, qhkOffset, route.Formats); err != nil {
		res = append(res, err)
	}

	qOrderBy, qhkOrderBy, _ := qs.GetOK("orderBy")
	if err := o.bindOrderBy(qOrderBy, qhkOrderBy, route.Formats); err != nil {
		res = append(res, err)
	}

	qPageSize, qhkPageSize, _ := qs.GetOK("pageSize")
	if err := o.bindPageSize(qPageSize, qhkPageSize, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindOffset binds and validates parameter Offset from query.
func (o *ListPaymentsParams) bindOffset(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewListPaymentsParams()
		return nil
	}

	o.Offset = &raw

	return nil
}

// bindOrderBy binds and validates parameter OrderBy from query.
func (o *ListPaymentsParams) bindOrderBy(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewListPaymentsParams()
		return nil
	}

	o.OrderBy = &raw

	if err := o.validateOrderBy(formats); err != nil {
		return err
	}

	return nil
}

// validateOrderBy carries on validations for parameter OrderBy
func (o *ListPaymentsParams) validateOrderBy(formats strfmt.Registry) error {

	if err := validate.Pattern("orderBy", "query", (*o.OrderBy), `^[A-Za-z0-9_]+$`); err != nil {
		return err
	}

	return nil
}

// bindPageSize binds and validates parameter PageSize from query.
func (o *ListPaymentsParams) bindPageSize(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewListPaymentsParams()
		return nil
	}

	o.PageSize = &raw

	return nil
}
